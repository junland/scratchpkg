#!/bin/bash
# Copyright 2019, John Unland (Forked)
# Copyright 2019, Emmett1  (emmett1.2miligrams@gmail.com)
# SPDX-License-Identifier: GPL-3.0-or-later

export LANG=C

get_perlmodules() {
	type -p perl &>/dev/null || return
	perlpath=$(dirname $(perl -V:sitearch | grep -o "'.*'" | sed "s/'//g"))
	for i in $(dirname $perlpath)/*; do
		[ "$perlpath" = "$i" ] && continue	
		ppkg=$(scratch own $i/$ | awk '{print $1}')
	done
}

get_modules() {
	[ -f /lib/modules/KERNELVERSION ] || return
	KERVER=$(cat /lib/modules/KERNELVERSION)
	for i in /lib/modules/*; do
		case $i in
			/lib/modules/KERNELVERSION|/lib/modules/$KERVER) continue ;;
		esac
		kpkg=$(scratch own $i/$ | awk '{print $1}')
	done
}

sort_modules() {
	for all in $(pkgdeplist -l -i $ppkg $kpkg | cut -d ' ' -f2); do
		for r in $ppkg $kpkg; do
			if [ $r = $all ]; then
				if [ -z "$order" ]; then
					order="$all"
				else
					order="$order $all"
				fi
				break
			fi
		done
	done
}

confirm() {
	read -r -p "$1 (Y/n) " response
	case "$response" in
		[Nn][Oo]|[Nn]) echo "$2"; exit 2 ;;
		*) : ;;
	esac
}

usage() {
	cat << EOF
Usage:
  $(basename $0) [options]
  
Options:
  -r     rebuild & reinstall broken package
  -y     dont ask user confirmation to rebuild package (use with -r)
  -h     print this help message

EOF
}

parse_opt() {
	while [ "$1" ]; do
		case $1 in
			-r) REBUILD=1 ;;
			-y) YES=1 ;;
			-h) usage; exit 0 ;;
			*)  echo "Invalid option ($1)"; exit 1 ;;
		esac
		shift
	done
}

parse_opt $@

if [ "$REBUILD" ] && [ "$UID" != 0 ]; then
	echo "Rebuild broken packages required root!"
	exit 1
fi

get_modules
get_perlmodules

if [ "$ppkg" ] || [ "$kpkg" ]; then
	sort_modules
else
	echo "No broken packages found."
	exit 0
fi

if [ "$REBUILD" = 1 ]; then
	if [ "$YES" = "" ]; then
		echo
		echo "Package will be rebuild & reinstall by this order:"
		echo " $order"
		echo
		confirm "Continue rebuild & reinstall broken packages?" "Operation cancelled."
	fi
	for p in $order; do
		scratch build -f $p && scratch install -r $p || exit 1
	done
else
	echo "Broken packages:"
	for p in $order; do
		echo " $p"
	done
fi

exit 0
